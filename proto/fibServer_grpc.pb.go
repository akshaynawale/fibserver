// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FibWorkerClient is the client API for FibWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibWorkerClient interface {
	// given a number returns it fibonachi number
	GetFibNumber(ctx context.Context, in *FibRequest, opts ...grpc.CallOption) (*FibReply, error)
}

type fibWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewFibWorkerClient(cc grpc.ClientConnInterface) FibWorkerClient {
	return &fibWorkerClient{cc}
}

func (c *fibWorkerClient) GetFibNumber(ctx context.Context, in *FibRequest, opts ...grpc.CallOption) (*FibReply, error) {
	out := new(FibReply)
	err := c.cc.Invoke(ctx, "/FibServerPB.FibWorker/GetFibNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibWorkerServer is the server API for FibWorker service.
// All implementations must embed UnimplementedFibWorkerServer
// for forward compatibility
type FibWorkerServer interface {
	// given a number returns it fibonachi number
	GetFibNumber(context.Context, *FibRequest) (*FibReply, error)
	mustEmbedUnimplementedFibWorkerServer()
}

// UnimplementedFibWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedFibWorkerServer struct {
}

func (UnimplementedFibWorkerServer) GetFibNumber(context.Context, *FibRequest) (*FibReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFibNumber not implemented")
}
func (UnimplementedFibWorkerServer) mustEmbedUnimplementedFibWorkerServer() {}

// UnsafeFibWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibWorkerServer will
// result in compilation errors.
type UnsafeFibWorkerServer interface {
	mustEmbedUnimplementedFibWorkerServer()
}

func RegisterFibWorkerServer(s grpc.ServiceRegistrar, srv FibWorkerServer) {
	s.RegisterService(&FibWorker_ServiceDesc, srv)
}

func _FibWorker_GetFibNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibWorkerServer).GetFibNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FibServerPB.FibWorker/GetFibNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibWorkerServer).GetFibNumber(ctx, req.(*FibRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FibWorker_ServiceDesc is the grpc.ServiceDesc for FibWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FibWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FibServerPB.FibWorker",
	HandlerType: (*FibWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFibNumber",
			Handler:    _FibWorker_GetFibNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fibServer.proto",
}
